spring.datasource.url= jdbc:mysql://localhost:3306/backend?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
spring.datasource.username= react
spring.datasource.password= MysqL12!@
spring.sql.init.mode= always
spring.sql.init.continue-on-error= true

spring.sql.init.platform= mysql
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update
# if you want ot upload test data create data.sql. if below is uncommented then data.sql will be executed
spring.sql.init.schema-locations= classpath:/sql/schema-${spring.sql.init.platform}.sql
spring.jpa.show-sql= false
spring.jpa.generate-ddl= true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.jdbc.time_zone= UTC

spring.datasource.hikari.data-source-properties.useConfigs=maxPerformance
# Jdbc groups several sql insert query statements into single insert query and executes it
# instead of running each sql query. So that number of round trips to the DB will be reduced.
# works well for insert queries but not for update queries.
# https://javabydeveloper.com/spring-jdbctemplate-batch-update-with-maxperformance/#2-3-optimizing-performance
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true